import snakebids
from snakebids import bids, generate_inputs, get_wildcard_constraints
from appdirs import AppDirs
import warnings 

configfile: 'config/snakebids.yml'

# select the pybids inputs of the chosen modality
selected_pybids_input = {config['modality']: config['pybids_inputs'][config['modality']]}

# show synthsr warning message if t2w or flair is chosen 
warn_modalities = ['T2w', 'FLAIR']
if config['modality'] in warn_modalities:
    warnings.warn(
        f"The AFIDS prediction on a {config['modality']} image is only as accurate as the SynthSR conversion of a {config['modality']} to a T1w image.",
        UserWarning
    )

inputs = generate_inputs(
    bids_dir=config['bids_dir'],
    pybids_inputs=selected_pybids_input,
    pybids_config=["bids", "derivatives"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
)

# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),

# ----
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    space="[a-zA-Z0-9]+",
    hemi="[a-zA-Z0-9]+",
    surfname="[a-zA-Z0-9]+",
    modality="[a-zA-Z0-9]+",
    density="[a-zA-Z0-9]+",
    atlas="[a-zA-Z0-9]+",
    autotop="[a-zA-Z0-9]+",
    template="[a-zA-Z0-9]+",

root = os.path.expandvars(config["root"])
work = os.path.expandvars(config["workdir"])

def get_download_dir():
    if "AUTOAFIDS_CACHE_DIR" in os.environ.keys():
        download_dir = os.environ["AUTOAFIDS_CACHE_DIR"]
    else:
        # create local download dir if it doesn't exist
        dirs = AppDirs("autoafids", "jclauneurolab")
        download_dir = dirs.user_cache_dir
    return download_dir

download_dir = get_download_dir()
# ---- begin preproc profile pathways --------------------------------------------

processing_steps = {
    "slow": ["freesurfer_preproc", "skull_strip", "norm_im"],
    "medium": ["n4_bias_correction", "skull_strip", "norm_im", "resample_im"],
    "fast": ["n4_bias_correction", "norm_im", "resample_im"],
    "superfast": ["norm_im", "resample_im"]
}

profile_settings = processing_steps[config["profile"]]

# Normalization scheme 
norm_methods = {
0: "zscore", #best for multi-contrast data
1: "minmax", #best for data from the same center
2: "percentile", #best for CT imaging [notavail]
3: "wm", #triggers FS WM tissue normalization then z-scores output (only for T1w)[notavail]
4: "other" #user must provide a python funtion (custom)[notavail]
}

# Chosen norm method
chosen_norm_method =  norm_methods[int(config['norm'])]

# Chosen resampling resolution
resolution = float(config['res'])

templatet1w =  config['templatet1w']

print(f'..... {config["profile"]} preprocessing configration .....')
print(f' the folowing squence will be triggered {profile_settings}')

if config['modality'] != "T1w":
    rule synthsr:
        input: 
            im=bids(
                root=str(Path(config["bids_dir"])),
                datatype="anat",
                suffix=f"{config['modality']}.nii.gz",
                **inputs[config['modality']].wildcards
            ),
        output:
            preprocessed_im=bids(
                root=work,
                datatype="non_t1w_preprocessed",
                desc="non_t1w_preprocessed",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ),
        container: config['singularity']['synthsr']
        shell: 'python /app/scripts/predict_command_line.py {input.im} {output.preprocessed_im} --cpu'

if "n4_bias_correction" in profile_settings:

    rule n4_bias_correction:
        input:
            im=bids(
                root=str(Path(config["bids_dir"])),
                datatype="anat",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            )if config['modality'] == "T1w" else
            bids(
                root=work,
                datatype="non_t1w_preprocessed",
                desc="non_t1w_preprocessed",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ),
        output:
            corrected_im=bids(
                root=work,
                datatype="n4biascorr",
                desc="n4corrected",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ),
        script:
            "scripts/n4_bias_corr.py"


rule norm_im:
    input:
        im_raw = lambda wildcards: bids(
                root=work,
                datatype="synthstrip",
                desc="synthstrip",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ) if "skull_strip" in profile_settings else
            bids(
                root=work,
                datatype="n4biascorr",
                desc="n4corrected",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ) if "n4_bias_correction" in profile_settings else
            bids(
                root=str(Path(config["bids_dir"])),
                datatype="anat",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ) if config['modality'] == "T1w" else
            bids(
                root=work,
                datatype="non_t1w_preprocessed",
                desc="non_t1w_preprocessed",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ),
    output:
        im_norm=bids(
            root=work,
            datatype="normalize",
            desc=chosen_norm_method,
            suffix="T1w.nii.gz",
            **inputs[config['modality']].wildcards,
            ),
    params:
        norm_method=chosen_norm_method
    script:
        "scripts/norm_schemes.py"

if "resample_im" in profile_settings:    

    rule resample_im:
        input:
            im_normed=bids(
            root=work,
            datatype="normalize",
            desc=chosen_norm_method,
            suffix="T1w.nii.gz",
            **inputs[config['modality']].wildcards,
            ),
        params:
            res=resolution
        output:
            resam_im=bids(
                root=work,
                datatype="resample",
                desc=chosen_norm_method,
                res=config["res"],
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards,
                ),
        script:
            "scripts/resample_img.py"


rule mni2sub:
    input:
        im_resamp = bids(
                root=work,
                datatype="n4biascorr",
                desc="n4corrected",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            ) if "n4_bias_correction" in profile_settings else
            bids(root=str(Path(config["bids_dir"])),
            datatype="anat",
            suffix="T1w.nii.gz",
            **inputs[config['modality']].wildcards
            ) if config['modality'] == "T1w" else
            bids(
                root=work,
                datatype="non_t1w_preprocessed",
                desc="non_t1w_preprocessed",
                suffix="T1w.nii.gz",
                **inputs[config['modality']].wildcards
            )
    output: 
        xfm_slicer = bids(
            root=work,
            datatype="registration",
            space="native",
            suffix="slicer.mat",
            **inputs[config['modality']].wildcards,
        ),
        xfm_ras = bids(
            root=work,
            datatype="registration",
            space="native",
            suffix="xfm.txt",
            **inputs[config['modality']].wildcards,
        ),
        out_im = bids(
            root=work,
            datatype="registration",
            space="native",
            suffix="MNI.nii.gz",
            **inputs[config['modality']].wildcards,
        ),
    params:
        moving = str(Path(workflow.basedir).parent / templatet1w)
    script: 
        "scripts/regis_script.py"

rule mni2subfids:
    input:
        xfm_new = bids(
            root=work,
            datatype="registration",
            space="native",
            suffix="xfm.txt",
            **inputs[config['modality']].wildcards,
        )
    params:
        fcsv=str(Path(workflow.basedir).parent / config["fcsv"]),
        fcsv_mni = str(Path(workflow.basedir).parent / config["fcsv_mni"])
    output:
        fcsv_new= bids(
            root=work,
            datatype="registration",
            space="native",
            desc="MNI",
            suffix="afids.fcsv",
            **inputs[config['modality']].wildcards,
        ),
    script:
        "scripts/tform_script.py"

include: "rules/cnn.smk"

rule all:
    input:
        models = inputs[config['modality']].expand(
           bids(
                root=root,
                datatype="afids-cnn",
                desc="afidscnn",
                suffix="afids.fcsv",
                **inputs[config['modality']].wildcards
        ),
    ),
    default_target: True